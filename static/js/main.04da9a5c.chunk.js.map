{"version":3,"sources":["common/cardImages.ts","components/SingleCard.tsx","App.tsx","index.tsx"],"names":["cardImages","src","matched","SingleCard","_ref","card","handleChoice","flipped","disabled","react_default","a","createElement","className","concat","alt","onClick","App","_useState","useState","_useState2","Object","slicedToArray","turns","setTurns","_useState3","_useState4","cards","setCards","_useState5","_useState6","setDisabled","_useState7","_useState8","choiceOne","setChoiceOne","_useState9","_useState10","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","toConsumableArray","sort","Math","random","map","objectSpread","id","useEffect","prevCards","resetTurn","setTimeout","prevTurns","src_components_SingleCard","key","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.04da9a5c.chunk.js","sourcesContent":["import Card from \"../types/Card\";\r\n\r\nconst cardImages: Card[] = [\r\n  { src: \"./img/planet1.png\", matched: false },\r\n  { src: \"./img/planet2.png\", matched: false },\r\n  { src: \"./img/planet3.png\", matched: false },\r\n  { src: \"./img/planet4.png\", matched: false },\r\n  { src: \"./img/planet5.png\", matched: false },\r\n  { src: \"./img/planet6.png\", matched: false }\r\n];\r\n\r\nexport default cardImages;\r\n","import \"./SingleCard.css\";\r\n\r\nimport React from \"react\";\r\n\r\nimport SingleCardProp from \"../types/SingleCardProp\";\r\n\r\nconst SingleCard = ({\r\n  card,\r\n  handleChoice,\r\n  flipped,\r\n  disabled\r\n}: SingleCardProp): JSX.Element => {\r\n  const handleClick = () => {\r\n    handleChoice(card);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <div className={`card-wrapper ${flipped ? \"flipped\" : \"\"}`}>\r\n          <img className=\"front\" src={card.src} alt=\"card front\" />\r\n          <img\r\n            className=\"back\"\r\n            src=\"./img/cover.png\"\r\n            onClick={() => {\r\n              !disabled && handleClick();\r\n            }}\r\n            alt=\"card back\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleCard;\r\n","import \"./App.css\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport Card from \"./types/Card\";\nimport Choice from \"./types/Choice\";\nimport cardImages from \"./common/cardImages\";\nimport ShuffledCard from \"./types/ShuffledCard\";\nimport SingleCard from \"./components/SingleCard\";\n\nconst App = (): JSX.Element => {\n  const [turns, setTurns] = useState<number>(0);\n  const [cards, setCards] = useState<ShuffledCard[]>([]);\n  const [disabled, setDisabled] = useState<boolean>(false);\n  const [choiceOne, setChoiceOne] = useState<Choice>(null);\n  const [choiceTwo, setChoiceTwo] = useState<Choice>(null);\n\n  //shuffle the cards\n  const shuffleCards = (): void => {\n    const shuffledCards: ShuffledCard[] = [...cardImages, ...cardImages]\n      .sort((): number => Math.random() - 0.5)\n      .map(\n        (card: Card): ShuffledCard => ({\n          ...card,\n          id: Math.random()\n        })\n      );\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  //handle the click event\n  const handleChoice = (card: ShuffledCard): void => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  //compare the two cards\n  useEffect((): void => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards: ShuffledCard[]): ShuffledCard[] => {\n          return prevCards.map((card: ShuffledCard): ShuffledCard => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            }\n            return card;\n          });\n        });\n\n        resetTurn();\n      } else {\n        setTimeout((): void => {\n          resetTurn();\n        }, 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  //reset the turns\n  const resetTurn = (): void => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns: number): number => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  //start the game automatically\n  useEffect((): void => {\n    shuffleCards();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Card Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map(\n          (card: ShuffledCard): JSX.Element => (\n            <SingleCard\n              key={card.id}\n              card={card}\n              handleChoice={handleChoice}\n              flipped={card === choiceOne || card === choiceTwo || card.matched}\n              disabled={disabled}\n            />\n          )\n        )}\n      </div>\n\n      <p>Turns: {turns}</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}